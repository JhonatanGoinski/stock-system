generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  description       String?
  category          String              @db.VarChar(100)
  size              String?             @db.VarChar(50)
  costPrice         Decimal             @map("cost_price") @db.Decimal(10, 2)
  salePrice         Decimal             @map("sale_price") @db.Decimal(10, 2)
  stockQuantity     Int                 @default(0) @map("stock_quantity")
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt         DateTime            @updatedAt @map("updated_at") @db.Timestamp(0)
  productionHistory ProductionHistory[]
  sales             Sale[]

  @@index([category])
  @@index([stockQuantity])
  @@map("products")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String?  @db.VarChar(255)
  phone     String?  @db.VarChar(20)
  document  String?  @db.VarChar(20)
  address   String?
  city      String?  @db.VarChar(100)
  state     String?  @db.VarChar(2)
  zipCode   String?  @map("zip_code") @db.VarChar(10)
  notes     String?
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  sales     Sale[]

  @@index([name])
  @@index([email])
  @@index([document])
  @@index([isActive])
  @@map("customers")
}

model Sale {
  id          Int       @id @default(autoincrement())
  productId   Int       @map("product_id")
  customerId  Int?      @map("customer_id")
  quantity    Int
  unitPrice   Decimal   @map("unit_price") @db.Decimal(10, 2)
  totalAmount Decimal   @map("total_amount") @db.Decimal(10, 2)
  discount    Decimal?  @default(0) @db.Decimal(10, 2)
  notes       String?
  saleDate    DateTime  @default(now()) @map("sale_date") @db.Date
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  customer    Customer? @relation(fields: [customerId], references: [id])
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([saleDate])
  @@index([productId])
  @@index([customerId])
  @@map("sales")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?   @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  emailVerified DateTime? @map("email_verified") @db.Timestamp(0)
  image         String?   @db.VarChar(255)
  role          String    @default("user") @db.VarChar(50)
  company       String?   @db.VarChar(255)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)
  accounts      Account[]
  sessions      Session[]

  @@index([email])
  @@map("users")
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int      @map("user_id")
  type              String   @db.VarChar(255)
  provider          String   @db.VarChar(255)
  providerAccountId String   @map("provider_account_id") @db.VarChar(255)
  refreshToken      String?  @map("refresh_token")
  accessToken       String?  @map("access_token")
  expiresAt         Int?     @map("expires_at")
  tokenType         String?  @map("token_type") @db.VarChar(255)
  scope             String?  @db.VarChar(255)
  idToken           String?  @map("id_token")
  sessionState      String?  @map("session_state") @db.VarChar(255)
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt         DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token") @db.VarChar(255)
  userId       Int      @map("user_id")
  expires      DateTime @db.Timestamp(0)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamp(0)

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model LoginCredentials {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  name      String   @db.VarChar(255)
  role      String   @default("user") @db.VarChar(50)
  company   String?  @db.VarChar(255)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  @@index([email])
  @@index([isActive])
  @@map("login_credentials")
}

model ProductionHistory {
  id             Int      @id @default(autoincrement())
  productId      Int      @map("product_id")
  quantity       Int
  productionDate DateTime @map("production_date") @db.Date
  notes          String?
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([productionDate])
  @@map("production_history")
}
